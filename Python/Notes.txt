---

number = int(input())
stroka = str()
----
минуты в часы + минуты
a = int(input())
h = a // 60
m = a % 60
print(str(a) + " мин" + " - это " + str(h) + " час " + str(m) + " минут.")
----
вытянуть цыфры из числа
num = int(input())
digit3 = num % 10
digit2 = (num // 10) % 10
digit1 = num // 100
...

--------
if age >= 7 and age <= 9:
полностью эквивалентен коду:
if 7 <= age <= 9:

------
int()	Округляет число в сторону нуля
round(x)	Округляет число x до ближайшего целого. Если дробная часть числа равна 0.5, то число округляется до ближайшего четного числа
round(x, n)	Округляет число x до n знаков после точки
floor(x)	Округляет число x вниз («пол»)
ceil(x)	Округляет число x вверх («потолок»)
abs(x)	Модуль числа x (абсолютная величина)
Корни, логарифмы, степени и факториал
sqrt(x)	Квадратный корень числа x
pow(x, n)	Возведение числа x в степень n
log(x)	Натуральный логарифм числа x. Основание натурального логарифма равно числу e
log10(x)	Десятичный логарифм числа x. Основание десятичного логарифма равно числу 10
log(x, b)	Логарифм числа x по основанию b
factorial(n)	Факториал натурального числа n


=============================================

# СТРОКИ, срезы

s = input()
print(len(s)) # общее количество символов в строке;
print(s * 3) # исходную строку повторенную 3 раза;
print(s[0]) # первый символ строки;
print(s[:3]) # первые три символа строки;
print(s[-3:]) # последние три символа строки;
print(s[::-1]) # строку в обратном порядке
print(s[1:-1]) # cтроку с удаленным первым и последним символом.

print(s[2])  # третий символ этой строки;
print(s[-2])  # предпоследний символ этой строки;
print(s[:5])  # первые пять символов этой строки;
print(s[:-2])  # всю строку, кроме последних двух символов;
print(s[::2])  # все символы с четными индексами;
print(s[1::2])  # все символы с нечетными индексами;
print(s[::-1])  # все символы в обратном порядке;
print(s[::-2])  # все символы строки через один в обратном порядке, начиная с последнего.

====================================================


"Функции и методы строк"


S1 + S2 Конкатенация (сложение строк)
S1 * 3 Повторение строки
S[i] Обращение по индексу
S[i:j:step] Извлечение среза
len(S) Длина строки
S.find(str, [start],[end]) Поиск подстроки в строке. Возвращает номер первого вхождения или -1
S.rfind(str, [start],[end]) Поиск подстроки в строке. Возвращает номер последнего вхождения или -1
S.index(str, [start],[end]) Поиск подстроки в строке. Возвращает номер первого вхождения или вызывает ValueError
S.rindex(str, [start],[end]) Поиск подстроки в строке. Возвращает номер последнего вхождения или вызывает ValueError
S.replace(шаблон, замена) Замена шаблона
S.split(символ) Разбиение строки по разделителю
S.isdigit() Состоит ли строка из цифр
S.isalpha() Состоит ли строка из букв
S.isalnum() Состоит ли строка из цифр или букв
S.islower() Состоит ли строка из символов в нижнем регистре
S.isupper() Состоит ли строка из символов в верхнем регистре
S.isspace() Состоит ли строка из неотображаемых символов (пробел, символ перевода страницы ('\f'), "новая строка" ('\n'), "перевод каретки" ('\r'), "горизонтальная табуляция" ('\t') и "вертикальная табуляция" ('\v'))
S.istitle() Начинаются ли слова в строке с заглавной буквы
S.upper() Преобразование строки к верхнему регистру
S.lower() Преобразование строки к нижнему регистру
S.startswith(str) Начинается ли строка S с шаблона str
S.endswith(str) Заканчивается ли строка S шаблоном str
S.join(список) Сборка строки из списка с разделителем S
ord(символ) Символ в его код ASCII
chr(число) Код ASCII в символ
S.capitalize() Переводит первый символ строки в верхний регистр, а все остальные в нижний
S.center(width, [fill]) Возвращает отцентрованную строку, по краям которой стоит символ fill (пробел по умолчанию)
S.count(str, [start],[end]) Возвращает количество непересекающихся вхождений подстроки в диапазоне [начало, конец] (0 и длина строки по умолчанию)
S.expandtabs([tabsize]) Возвращает копию строки, в которой все символы табуляции заменяются одним или несколькими пробелами, в зависимости от текущего столбца. Если TabSize не указан, размер табуляции полагается равным 8 пробелам
S.lstrip([chars]) Удаление пробельных символов в начале строки
S.rstrip([chars]) Удаление пробельных символов в конце строки
S.strip([chars]) Удаление пробельных символов в начале и в конце строки
S.partition(шаблон) Возвращает кортеж, содержащий часть перед первым шаблоном, сам шаблон, и часть после шаблона. Если шаблон не найден, возвращается кортеж, содержащий саму строку, а затем две пустых строки
S.rpartition(sep) Возвращает кортеж, содержащий часть перед последним шаблоном, сам шаблон, и часть после шаблона. Если шаблон не найден, возвращается кортеж, содержащий две пустых строки, а затем саму строку
S.swapcase() Переводит символы нижнего регистра в верхний, а верхнего – в нижний
S.title() Первую букву каждого слова переводит в верхний регистр, а все остальные в нижний
S.zfill(width) Делает длину строки не меньшей width, по необходимости заполняя первые символы нулями
S.ljust(width, fillchar=" ") Делает длину строки не меньшей width, по необходимости заполняя последние символы символом fillchar
S.rjust(width, fillchar=" ") Делает длину строки не меньшей width, по необходимости заполняя первые символы символом fillchar

=============================================

МЕТОДЫ СПИСКОВ

list.append(x)	Добавляет элемент в конец списка
list.extend(L)	Расширяет список list, добавляя в конец все элементы списка L
list.insert(i, x)	Вставляет на i-ый элемент значение x
list.remove(x)	Удаляет первый элемент в списке, имеющий значение x. ValueError, если такого элемента не существует
list.pop([i])	Удаляет i-ый элемент и возвращает его. Если индекс не указан, удаляется последний элемент
list.index(x, [start [, end]])	Возвращает положение первого элемента со значением x (при этом поиск ведется от start до end)
list.count(x)	Возвращает количество элементов со значением x
list.sort([key=функция])	Сортирует список на основе функции (https://tproger.ru/translations/python-sorting/) 
list.reverse()	Разворачивает список
list.copy()	Поверхностная копия списка
list.clear()	Очищает список

Список в строку: str = ''.join(list)

Среднее значение списка: sum(lst)/len(lst)

--------------------------

ФУНКЦИИ СПИСКОВ

sorted()

Функция sorted возвращает новый отсортированный список, который получен из итерируемого объекта, который был передан как аргумент. Функция также поддерживает дополнительные параметры, которые позволяют управлять сортировкой.
Первый аспект, на который важно обратить внимание - sorted всегда возвращает список.
Если сортировать список элементов, то возвращается новый список:

=======================================

Встроенные функции, выполняющие преобразование типов


bool(x) - преобразование к типу bool, использующая стандартную процедуру проверки истинности. Если х является ложным или опущен, возвращает значение False, в противном случае она возвращает True.
bytearray([источник [, кодировка [ошибки]]]) - преобразование к bytearray. Bytearray - изменяемая последовательность целых чисел в диапазоне 0≤X<256. Вызванная без аргументов, возвращает пустой массив байт.
bytes([источник [, кодировка [ошибки]]]) - возвращает объект типа bytes, который является неизменяемой последовательностью целых чисел в диапазоне 0≤X<256. Аргументы конструктора интерпретируются как для bytearray().
complex([real[, imag]]) - преобразование к комплексному числу.
dict([object]) - преобразование к словарю.
float([X]) - преобразование к числу с плавающей точкой. Если аргумент не указан, возвращается 0.0.
frozenset([последовательность]) - возвращает неизменяемое множество.
int([object], [основание системы счисления]) - преобразование к целому числу.
list([object]) - создает список.
memoryview([object]) - создает объект memoryview.
object() - возвращает безликий объект, являющийся базовым для всех объектов.
range([start=0], stop, [step=1]) - арифметическая прогрессия от start до stop с шагом step.
set([object]) - создает множество.
slice([start=0], stop, [step=1]) - объект среза от start до stop с шагом step.
str([object], [кодировка], [ошибки]) - строковое представление объекта. Использует метод __str__.
tuple(obj) - преобразование к кортежу.

----- Другие встроенные функции --------

СОРТИРОВКА ---- https://tproger.ru/translations/python-sorting/ 

abs(x) - Возвращает абсолютную величину (модуль числа).
all(последовательность) - Возвращает True, если все элементы истинные (или, если последовательность пуста).
any(последовательность) - Возвращает True, если хотя бы один элемент - истина. Для пустой последовательности возвращает False.
ascii(object) - Как repr(), возвращает строку, содержащую представление объекта, но заменяет не-ASCII символы на экранированные последовательности.
bin(x) - Преобразование целого числа в двоичную строку.
callable(x) - Возвращает True для объекта, поддерживающего вызов (как функции).
chr(x) - Возвращает односимвольную строку, код символа которой равен x.
classmethod(x) - Представляет указанную функцию методом класса.
compile(source, filename, mode, flags=0, dont_inherit=False) - Компиляция в программный код, который впоследствии может выполниться функцией eval или exec. Строка не должна содержать символов возврата каретки или нулевые байты.
delattr(object, name) - Удаляет атрибут с именем 'name'.
dir([object]) - Список имен объекта, а если объект не указан, список имен в текущей локальной области видимости.
divmod(a, b) - Возвращает частное и остаток от деления a на b.
enumerate(iterable, start=0) - Возвращает итератор, при каждом проходе предоставляющем кортеж из номера и соответствующего члена последовательности.
eval(expression, globals=None, locals=None) - Выполняет строку программного кода.
exec(object[, globals[, locals]]) - Выполняет программный код на Python.
filter(function, iterable) - Возвращает итератор из тех элементов, для которых function возвращает истину.
format(value[,format_spec]) - Форматирование (обычно форматирование строки).
getattr(object, name ,[default]) - извлекает атрибут объекта или default.
globals() - Словарь глобальных имен.
hasattr(object, name) - Имеет ли объект атрибут с именем 'name'.
hash(x) - Возвращает хеш указанного объекта.
help([object]) - Вызов встроенной справочной системы.
hex(х) - Преобразование целого числа в шестнадцатеричную строку.
id(object) - Возвращает "адрес" объекта. Это целое число, которое гарантированно будет уникальным и постоянным для данного объекта в течение срока его существования.
input([prompt]) - Возвращает введенную пользователем строку. Prompt - подсказка пользователю.
isinstance(object, ClassInfo) - Истина, если объект является экземпляром ClassInfo или его подклассом. Если объект не является объектом данного типа, функция всегда возвращает ложь.
issubclass(класс, ClassInfo) - Истина, если класс является подклассом ClassInfo. Класс считается подклассом себя.
iter(x) - Возвращает объект итератора.
len(x) - Возвращает число элементов в указанном объекте.
locals() - Словарь локальных имен.
map(function, iterator) - Итератор, получившийся после применения к каждому элементу последовательности функции function.
max(iter, [args ...] * [, key]) - Максимальный элемент последовательности.
min(iter, [args ...] * [, key]) - Минимальный элемент последовательности.
next(x) - Возвращает следующий элемент итератора.
oct(х) - Преобразование целого числа в восьмеричную строку.
open(file, mode='r', buffering=None, encoding=None, errors=None, newline=None, closefd=True) - Открывает файл и возвращает соответствующий поток.
ord(с) - Код символа.
pow(x, y[, r]) - ( x ** y ) % r.
reversed(object) - Итератор из развернутого объекта.
repr(obj) - Представление объекта.
print([object, ...], *, sep=" ", end='\n', file=sys.stdout) - Печать.
property(fget=None, fset=None, fdel=None, doc=None)
round(X [, N]) - Округление до N знаков после запятой.
setattr(объект, имя, значение) - Устанавливает атрибут объекта.
sorted(iterable[, key][, reverse]) - Отсортированный список.
staticmethod(function) - Статический метод для функции.
sum(iter, start=0) - Сумма членов последовательности.
super([тип [, объект или тип]]) - Доступ к родительскому классу.
type(object) - Возвращает тип объекта.
type(name, bases, dict) - Возвращает новый экземпляр класса name.
vars([object]) - Словарь из атрибутов объекта. По умолчанию - словарь локальных имен.
zip(*iters) - Итератор, возвращающий кортежи, состоящие из соответствующих элементов аргументов-последовательностей.

===============================================================================

-------- Методы словарей ----------

https://devpractice.ru/python-lesson-9-dict/ 


dict.clear() - очищает словарь.
dict.copy() - возвращает копию словаря.
classmethod dict.fromkeys(seq[, value]) - создает словарь с ключами из seq и значением value (по умолчанию None).
dict.get(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а возвращает default (по умолчанию None).
dict.items() - возвращает пары (ключ, значение).
dict.keys() - возвращает ключи в словаре.
dict.pop(key[, default]) - удаляет ключ и возвращает значение. Если ключа нет, возвращает default (по умолчанию бросает исключение).
dict.popitem() - удаляет и возвращает пару (ключ, значение). Если словарь пуст, бросает исключение KeyError. Помните, что словари неупорядочены.
dict.setdefault(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а создает ключ со значением default (по умолчанию None).

dict.update([other]) - обновляет словарь, добавляя пары (ключ, значение) из other (other нужен кортеж (ключ, значение). Существующие ключи перезаписываются. Возвращает None (не новый словарь!).
https://docs-python.ru/tutorial/operatsii-slovarjami-dict-python/metod-dict-update/ 

dict.values() - возвращает значения в словаре.


    ### Creating an empty dictionary ###
data = {}
# OR
data = dict()

    ### Creating a dictionary with initial values ###
data = {'a':1,'b':2,'c':3}
# OR
data = dict(a=1, b=2, c=3)

    ### Inserting/Updating a single value ###
data['a']=1  # Updates if 'a' exists, else adds 'a'
# OR
data.update({'a':1})
# OR
data.update(dict(a=1))
# OR
data.update(a=1)

    ### Inserting/Updating multiple values ###
data.update({'c':3,'d':4})  # Updates 'c' and adds 'd'

    ### Creating a merged dictionary without modifying originals
data3 = {}
data3.update(data)  # Modifies data3, not data
data3.update(data2)  # Modifies data3, not data2

    ### Deleting items in dictionary ###
del data[key]  # Removes specific element in a dictionary
data.pop(key)  # Removes the key & returns the value
data.clear()  # Clears entire dictionary

МАКСИМАЛЬНОЕ ЗНАЧЕНИЕ В словаре

def f1():  
     v=list(d1.values())
     k=list(d1.keys())
     return k[v.index(max(v))]

---------------------
СОРТИРОВКА СЛОВАРЯ ПО ЗНАЧЕНИЮ 

dict1 = {1: 1, 2: 9, 3: 4}
sorted_tuples = sorted(dict1.items(), key=operator.itemgetter(1))
print(sorted_tuples)  # [(1, 1), (3, 4), (2, 9)]
sorted_dict = {k: v for k, v in sorted_tuples}
print(sorted_dict) # {1: 1, 3: 4, 2: 9}

https://dev-gang.ru/article/kak-otsortirovat-slovar-po-znaczeniu-v-python-lpmzj4kbrj/ 

----------------------------

Обращение по индексу значения:
dict[i][j] += 1

Создать словарь из двух списков: 
dict(zip(list1,list2))


=======================================================================

МНОЖЕСТВА (SET) 

С множествами можно выполнять множество операций: находить объединение, пересечение...

len(s) - число элементов в множестве (размер множества).
x in s - принадлежит ли x множеству s.
set.isdisjoint(other) - истина, если set и other не имеют общих элементов.
set == other - все элементы set принадлежат other, все элементы other принадлежат set.
set.issubset(other) или set <= other - все элементы set принадлежат other.
set.issuperset(other) или set >= other - аналогично.
set.union(other, ...) или set | other | ... - объединение нескольких множеств.
set.intersection(other, ...) или set & other & ... - пересечение.
set.difference(other, ...) или set - other - ... - множество из всех элементов set, не принадлежащие ни одному из other.
set.symmetric_difference(other); set ^ other - множество из элементов, встречающихся в одном множестве, но не встречающиеся в обоих.
set.copy() - копия множества.

И операции, непосредственно изменяющие множество:

set.update(other, ...); set |= other | ... - объединение.
set.intersection_update(other, ...); set &= other & ... - пересечение.
set.difference_update(other, ...); set -= other | ... - вычитание.
set.symmetric_difference_update(other); set ^= other - множество из элементов, встречающихся в одном множестве, но не встречающиеся в обоих.
set.add(elem) - добавляет элемент в множество.
set.remove(elem) - удаляет элемент из множества. KeyError, если такого элемента не существует.
set.discard(elem) - удаляет элемент, если он находится в множестве.
set.pop() - удаляет первый элемент из множества. Так как множества не упорядочены, нельзя точно сказать, какой элемент будет первым.
set.clear() - очистка множества.


=======================================

----- Map --------

Функция map() в python имеет следующий синтаксис:

map(func, *iterables)
Где func это функция, к которой будет применен каждый элемент из iterables (столько, сколько их есть). Заметили звездочку(*) на iterables? Это означает, что итераций может быть сколько угодно много, поскольку у func столько точных чисел, сколько и для входных аргументов. Прежде чем перейти к примеру, важно отметить следующее:

В Python 3, однако, функция возвращает map object который является объектом-генератором. Чтобы получить результат в виде списка, встроенная функция list() может быть вызвана для объекта карты, то есть список list(map(func, *iterables))
Количество аргументов функции должно быть числом перечисленных iterables.
Давайте посмотрим, как эти правила действуют на следующих примерах.

Скажем, у меня есть список (iterable) моих любимых имен домашних животных, все в нижнем регистре, и мне нужны они в верхнем регистре. Традиционно, в обычном программировании на Python я бы сделал что-то вроде этого:

my_pets = ['alfred', 'tabitha', 'william', 'arla']
uppered_pets = []

for pet in my_pets:
    pet_ = pet.upper()
    uppered_pets.append(pet_)

print(uppered_pets)
что затем выведет ['ALFRED', 'TABITHA', 'WILLIAM', 'ARLA']

https://codecamp.ru/blog/map-filter-reduce/ 

=================================

------- Filter -------


В то время как map() пропускает каждый элемент итерируемого через функцию и возвращает результат всех элементов, прошедших через функцию filter(), прежде всего, требует, чтобы функция возвращала логические значения (true или false), а затем передает каждый элемент итерируемого через функцию, «отфильтровывая» те, которые являются ложными. Имеет следующий синтаксис:

filter(func, iterable)

Следующие пункты должны быть отмечены относительно filter():
В отличие от map(), (), требуется только один итерируемый.
Аргумент func необходим для возврата логического типа. Если этого не происходит, filter sпросто возвращает передаваемый ему iterable. Кроме того, поскольку требуется только один итерируемый, подразумевается, что func должен принимать только один аргумент.
filter пропускает каждый элемент в итерируемом через func возвращает только только те, которые имеют значение true. Ведь это же заложено в самом названии -- «фильтр».
Давайте посмотрим несколько примеров

Ниже приведен список (iterable) баллов 10 студентов на экзамене по химии. Давайте отфильтруем тех, кто сдал с баллом выше 75 ... используя filter.

# Python 3
scores = [66, 90, 68, 59, 76, 60, 88, 74, 81, 65]
def is_A_student(score):
    return score > 75
over_75 = list(filter(is_A_student, scores))
print(over_75)